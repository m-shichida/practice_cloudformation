AWSTemplateFormatVersion: "2010-09-09"
Description: Create EC2 in created Subnet

# ======================================================================
#                              Parameters
# ======================================================================

Parameters:
  PJPrefix:
    Description: Enter a prefix of this system.
    Type: String
    Default: "test"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9][ -~]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.

  # なんかホントはEC2によって変えるんやろうけど今回はなし
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedPattern:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: must be a valid EC2 instance type

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription : Can contain only ASCII characters.

  SSHLocation:
    Description: IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Mappings:
  RegionMap:
    ap-northeast-1:
      # 一旦これだけで作成する
      hvm: "ami-0173663a2534689c6"

Description: Create EC2 Instance
Resources:
# ======================================================================
#                              Parameters
# ======================================================================
  PublicAEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', hvm]
      Instancetype: !Ref InstanceType
      SubnetId: { "Fn::ImportValue": !Sub "${PJPrefix}-public-subnet-a" }
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !GetAtt "PublicInstanceSecurityGroup.GroupId"
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: 8

  PublicCEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', hvm]
      Instancetype: !Ref InstanceType
      SubnetId: { "Fn::ImportValue": !Sub "${PJPrefix}-public-subnet-c" }
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !GetAtt "PublicInstanceSecurityGroup.GroupId"
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: 8

  PrivateAEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', hvm]
      SubnetId: { "Fn::ImportValue": !Sub "${PJPrefix}-private-subnet-a" }
      KeyName: !Ref KeyName
      Instancetype: !Ref InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: 8

  PrivateCEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', hvm]
      SubnetId: { "Fn::ImportValue": !Sub "${PJPrefix}-private-subnet-c" }
      KeyName: !Ref KeyName
      Instancetype: !Ref InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: 8

  PublicInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: connect with ssh http https
      # 他のスタックから${PJPrefix-vpc}のVPCの見つけて作成する
      VpcId: { "Fn::ImportValue": !Sub "${PJPrefix}-vpc" }
      SecurityGroupIngress:
        # ssh
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        # http
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        # https
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443

  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: { "Fn::ImportValue": !Sub "${PJPrefix}-vpc" }
      SecurityGroupIngress":
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId" : { "Ref" : "WebServerSecurityGroup" }
